// Generated by Haxe 3.4.0 (git build development @ d3955c6)
(function () { "use strict";
var JsDemo = function() { };
JsDemo.main = function() {
	var tinyCanvasRect = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-samplerect");
	window.document.body.appendChild(tinyCanvasRect.canvas);
	JsDemo.initTinyCanvas(tinyCanvasRect,JsDemo.X,JsDemo.Y);
	tinyCanvasRect.canvas.addEventListener("click",function(event) {
		var minDist = 15;
		var drawRadius = minDist * .85;
		var samples = JsDemo.generateSamplesInRect(0,0,tinyCanvasRect.canvas.width,tinyCanvasRect.canvas.height,minDist);
		JsDemo.drawSamples(tinyCanvasRect,samples,drawRadius,JsDemo.rectPalette);
	});
	tinyCanvasRect.canvas.click();
	var tinyCanvasCircle = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-samplecircle");
	window.document.body.appendChild(tinyCanvasCircle.canvas);
	JsDemo.initTinyCanvas(tinyCanvasCircle,JsDemo.X + JsDemo.WIDTH + JsDemo.SPACE,JsDemo.Y);
	tinyCanvasCircle.canvas.addEventListener("click",function(event1) {
		var minDist1 = 15;
		var radius = tinyCanvasCircle.canvas.width * .45;
		var drawRadius1 = minDist1 * .75;
		var center_y;
		var center_x = tinyCanvasCircle.canvas.width * .5;
		center_y = tinyCanvasCircle.canvas.height * .5;
		var samples1 = JsDemo.generateSamplesInCircle(center_x,center_y,radius,minDist1);
		JsDemo.drawSamples(tinyCanvasCircle,samples1,drawRadius1,JsDemo.circlePalette);
		TinyCanvas.drawCircle(TinyCanvas.lineStyle(tinyCanvasCircle,2.,JsDemo.BOUND_COLOR,.75),center_x,center_y,radius);
	});
	tinyCanvasCircle.canvas.click();
};
JsDemo.initTinyCanvas = function(tinyCanvas,x,y) {
	var style = tinyCanvas.canvas.style;
	style.backgroundColor = "#000000";
	style.position = "absolute";
	style.left = x == null ? "null" : "" + x;
	style.top = y == null ? "null" : "" + y;
	style.cursor = "hand";
};
JsDemo.generateSamplesInRect = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	return upd1.sampleRectangle(topLeft,bottomRight,minDist,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo.generateSamplesInCircle = function(cx,cy,radius,minDist) {
	var center = new upd_SimplePoint(cx,cy);
	var upd1 = new upd_UniformPoissonDisk();
	return upd1.sampleCircle(center,radius,minDist,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo.drawSamples = function(tinyCanvas,samples,radius,palette) {
	var color = palette != null ? palette[0] : 16711680;
	var fillAlpha = .8;
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.clear(tinyCanvas),3,color,1),0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
	var _g = 0;
	while(_g < samples.length) {
		var p = samples[_g];
		++_g;
		color = JsDemo.getRandomColorFrom(palette,color);
		TinyCanvas.lineStyle(tinyCanvas,1.5,color,1);
		TinyCanvas.beginFill(tinyCanvas,color,fillAlpha);
		TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,.25);
		TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,radius);
		TinyCanvas.endFill(tinyCanvas);
	}
};
JsDemo.getRandomColorFrom = function(palette,defaultColor) {
	if(palette == null || palette.length == 0) {
		return defaultColor;
	} else {
		return palette[Std.random(palette.length)];
	}
};
var Std = function() { };
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var TinyCanvas = function(width,height,id,useThisCanvas) {
	if(useThisCanvas == null) {
		this.canvas = window.document.createElement("canvas");
	} else {
		this.canvas = useThisCanvas;
	}
	this.canvas.width = width;
	this.canvas.height = height;
	this.canvas.id = id;
	this.context = this.canvas.getContext("2d",null);
};
TinyCanvas.intToRgb = function(color) {
	return { r : color >> 16 & 255, g : color >> 8 & 255, b : color & 255};
};
TinyCanvas.clear = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.clearRect(0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
	return tinyCanvas;
};
TinyCanvas.lineStyle = function(tinyCanvas,thickness,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	ctx.lineWidth = thickness;
	var rgb = TinyCanvas.intToRgb(color);
	if(alpha != 1.0) {
		ctx.strokeStyle = "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + alpha + ")";
	} else {
		ctx.strokeStyle = "rgb(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.beginFill = function(tinyCanvas,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	var rgb = TinyCanvas.intToRgb(color);
	if(alpha != 1.0) {
		ctx.fillStyle = "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + alpha + ")";
	} else {
		ctx.fillStyle = "rgb(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.endFill = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.fill();
	return tinyCanvas;
};
TinyCanvas.moveTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	return tinyCanvas;
};
TinyCanvas.lineTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.lineTo(x,y);
	return tinyCanvas;
};
TinyCanvas.quadTo = function(tinyCanvas,cx,cy,ax,ay) {
	var ctx = tinyCanvas.context;
	ctx.quadraticCurveTo(cx,cy,ax,ay);
	return tinyCanvas;
};
TinyCanvas.stroke = function(tinyCanvas,closePath) {
	if(closePath == null) {
		closePath = true;
	}
	var ctx = tinyCanvas.context;
	ctx.stroke();
	if(closePath) {
		ctx.closePath();
	}
	return tinyCanvas;
};
TinyCanvas.drawCircle = function(tinyCanvas,x,y,radius) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.arc(x,y,radius,0,2 * Math.PI,false);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.drawRect = function(tinyCanvas,x,y,width,height) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	ctx.lineTo(x + width,y);
	ctx.lineTo(x + width,y + height);
	ctx.lineTo(x,y + height);
	ctx.lineTo(x,y);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.main = function() {
	var tinyCanvas = new TinyCanvas(300,300,"canvas");
	window.document.body.appendChild(tinyCanvas.canvas);
	TinyCanvas.lineStyle(tinyCanvas,0,0,0);
	TinyCanvas.beginFill(tinyCanvas,65280);
	TinyCanvas.drawCircle(tinyCanvas,40,40,40);
	TinyCanvas.endFill(tinyCanvas);
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.endFill(TinyCanvas.drawRect(TinyCanvas.beginFill(tinyCanvas,16776960),0,0,40,40)),2.,16711680,1),0,0,40,40);
	var tinyCanvas1 = TinyCanvas.lineStyle(tinyCanvas,5,16777215,.5);
	var ctx = tinyCanvas1.context;
	ctx.beginPath();
	ctx.moveTo(0,0);
	var tinyCanvas2 = tinyCanvas1;
	var ctx1 = tinyCanvas2.context;
	ctx1.lineTo(50,50);
	var tinyCanvas3 = TinyCanvas.stroke(tinyCanvas2);
	var ctx2 = tinyCanvas3.context;
	ctx2.beginPath();
	ctx2.moveTo(100,100);
	var tinyCanvas4 = tinyCanvas3;
	var ctx3 = tinyCanvas4.context;
	ctx3.lineTo(30,70);
	var tinyCanvas5 = tinyCanvas4;
	var ctx4 = tinyCanvas5.context;
	ctx4.lineTo(80,20);
	var tinyCanvas6 = tinyCanvas5;
	var ctx5 = tinyCanvas6.context;
	ctx5.lineTo(60,60);
	TinyCanvas.quadTo(tinyCanvas6,80,60,80,80);
	TinyCanvas.stroke(tinyCanvas);
	TinyCanvas.endFill(tinyCanvas);
};
TinyCanvas.prototype = {
	get_width: function() {
		return this.canvas.width;
	}
	,get_height: function() {
		return this.canvas.height;
	}
	,get_id: function() {
		return this.canvas.id;
	}
};
var upd_SimplePoint = function(x,y) {
	this.x = x;
	this.y = y;
};
var upd_UniformPoissonDisk = function() {
	this.DEFAULT_POINTS_PER_ITERATION = 30;
};
upd_UniformPoissonDisk.prototype = {
	sampleCircle: function(center,radius,minimumDistance,pointsPerIteration) {
		if(pointsPerIteration == null) {
			pointsPerIteration = this.DEFAULT_POINTS_PER_ITERATION;
		}
		var topLeft = new upd_SimplePoint(center.x - radius,center.y - radius);
		var bottomRight = new upd_SimplePoint(center.x + radius,center.y + radius);
		return this.sample(topLeft,bottomRight,radius,minimumDistance,pointsPerIteration);
	}
	,sampleRectangle: function(topLeft,bottomRight,minimumDistance,pointsPerIteration) {
		if(pointsPerIteration == null) {
			pointsPerIteration = this.DEFAULT_POINTS_PER_ITERATION;
		}
		return this.sample(topLeft,bottomRight,null,minimumDistance,pointsPerIteration);
	}
	,sample: function(topLeft,bottomRight,rejectionDistance,minimumDistance,pointsPerIteration) {
		var dimensions = new upd_SimplePoint(bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		var cellSize = minimumDistance / upd_Tools.SQUARE_ROOT_TWO;
		var settings = { topLeft : topLeft, bottomRight : bottomRight, dimensions : dimensions, center : new upd_SimplePoint((topLeft.x + bottomRight.x) / 2,(topLeft.y + bottomRight.y) / 2), cellSize : cellSize, minimumDistance : minimumDistance, rejectionSqDistance : rejectionDistance == null ? null : rejectionDistance * rejectionDistance, gridWidth : (dimensions.x / cellSize | 0) + 1, gridHeight : (dimensions.y / cellSize | 0) + 1};
		var grid = [];
		var _g1 = 0;
		var _g = settings.gridHeight;
		while(_g1 < _g) {
			var y = _g1++;
			var _g2 = [];
			var _g4 = 0;
			var _g3 = settings.gridWidth;
			while(_g4 < _g3) {
				var x = _g4++;
				_g2.push(null);
			}
			grid.push(_g2);
		}
		var state = { activePoints : [], points : [], grid : grid};
		this.addFirstPoint(settings,state);
		while(state.activePoints.length != 0) {
			var listIndex = Std.random(state.activePoints.length);
			var point = state.activePoints[listIndex];
			var found = false;
			var _g11 = 0;
			var _g5 = pointsPerIteration;
			while(_g11 < _g5) {
				var k = _g11++;
				if(!found) {
					found = this.addNextPoint(point,settings,state);
				} else {
					found = true;
				}
			}
			if(!found) {
				state.activePoints.splice(listIndex,1);
			}
		}
		return state.points;
	}
	,addFirstPoint: function(settings,state) {
		var added = false;
		while(!added) {
			var d = Math.random();
			var xr = settings.topLeft.x + settings.dimensions.x * d;
			d = Math.random();
			var yr = settings.topLeft.y + settings.dimensions.y * d;
			var p = new upd_SimplePoint(xr,yr);
			if(settings.rejectionSqDistance != null && this.distanceSquared(settings.center,p) > settings.rejectionSqDistance) {
				continue;
			}
			added = true;
			var index = this.denormalize(p,settings.topLeft,settings.cellSize);
			state.grid[index.y | 0][index.x | 0] = p;
			state.activePoints.push(p);
			state.points.push(p);
		}
	}
	,addNextPoint: function(point,settings,state) {
		var found = false;
		var q = this.randomPointAround(point,settings.minimumDistance);
		if(q.x >= settings.topLeft.x && q.x < settings.bottomRight.x && q.y > settings.topLeft.y && q.y < settings.bottomRight.y && (settings.rejectionSqDistance == null || this.distanceSquared(settings.center,q) <= settings.rejectionSqDistance)) {
			var qIndex = this.denormalize(q,settings.topLeft,settings.cellSize);
			var tooClose = false;
			var i = Math.max(0,qIndex.x - 2) | 0;
			while(i < Math.min(settings.gridWidth,qIndex.x + 3) && !tooClose) {
				var j = Math.max(0,qIndex.y - 2) | 0;
				while(j < Math.min(settings.gridHeight,qIndex.y + 3) && !tooClose) {
					if(state.grid[j][i] != null && Math.sqrt(this.distanceSquared(state.grid[j][i],q)) < settings.minimumDistance) {
						tooClose = true;
					}
					++j;
				}
				++i;
			}
			if(!tooClose) {
				found = true;
				state.activePoints.push(q);
				state.points.push(q);
				state.grid[qIndex.y | 0][qIndex.x | 0] = q;
			}
		}
		return found;
	}
	,randomPointAround: function(center,minimumDistance) {
		var d = Math.random();
		var radius = minimumDistance + minimumDistance * d;
		d = Math.random();
		var angle = upd_Tools.TWO_PI * d;
		var newX = radius * Math.sin(angle);
		var newY = radius * Math.cos(angle);
		return new upd_SimplePoint(center.x + newX,center.y + newY);
	}
	,denormalize: function(point,origin,cellSize) {
		return new upd_SimplePoint((point.x - origin.x) / cellSize | 0,(point.y - origin.y) / cellSize | 0);
	}
	,distanceSquared: function(p,q) {
		var dx = p.x - q.x;
		var dy = p.y - q.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p,q) {
		return Math.sqrt(this.distanceSquared(p,q));
	}
};
var upd_Tools = function() { };
upd_Tools.randomInt = function(upperBound) {
	return Std.random(upperBound);
};
upd_Tools.randomFloat = function(upperBound) {
	if(upperBound == null) {
		upperBound = 1.0;
	}
	return Math.random() * upperBound;
};
JsDemo.X = 15;
JsDemo.Y = 15;
JsDemo.SPACE = 15;
JsDemo.WIDTH = 300;
JsDemo.HEIGHT = 300;
JsDemo.BOUND_COLOR = 12632256;
JsDemo.RED_PALETTE = [16711680,16064512,14685461,16723984];
JsDemo.GREEN_PALETTE = [65280,62752,1433621,1113904];
JsDemo.FIRE_PALETTE = [16601145,16610051,16620879,16638337,16598019,16601145,16610051,16620879];
JsDemo.GRASS_PALETTE = [11137665,12249985,8181122,4116355,55684,5894785,12245889,8189314];
JsDemo.rectPalette = JsDemo.FIRE_PALETTE;
JsDemo.circlePalette = JsDemo.GRASS_PALETTE;
upd_Tools.PI = Math.PI;
upd_Tools.HALF_PI = Math.PI / 2;
upd_Tools.TWO_PI = Math.PI * 2;
upd_Tools.SQUARE_ROOT_TWO = Math.sqrt(2);
JsDemo.main();
})();
