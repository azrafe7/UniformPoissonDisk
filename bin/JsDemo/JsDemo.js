// Generated by Haxe 3.4.0 (git build development @ d3955c6)
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var JsDemo = function() { };
JsDemo.__name__ = true;
JsDemo.main = function() {
	var tinyCanvasRect = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-samplerect");
	window.document.body.appendChild(tinyCanvasRect.canvas);
	JsDemo.initTinyCanvas(tinyCanvasRect,JsDemo.X,JsDemo.Y);
	var canvasRectOnClick = function(event) {
		var minDist = 15;
		var drawRadius = minDist * .85;
		var rect_y;
		var rect_x;
		var rect_width;
		var rect_height;
		rect_x = 15;
		rect_y = 15;
		rect_width = tinyCanvasRect.canvas.width - 30;
		rect_height = tinyCanvasRect.canvas.height - 30;
		if(event != null) {
			var rect = event.target.getBoundingClientRect();
			JsDemo.mousePos = new upd_SimplePoint(event.clientX - rect.left,event.clientY - rect.top);
		}
		var samples = JsDemo.generateSamplesInRect(rect_x,rect_y,rect_width,rect_height,minDist);
		JsDemo.clearCanvas(tinyCanvasRect,JsDemo.rectPalette);
		TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasRect,2.,JsDemo.BOUNDS_COLOR,.75),rect_x,rect_y,rect_width,rect_height);
		JsDemo.drawSamples(tinyCanvasRect,samples,drawRadius,JsDemo.rectPalette);
	};
	tinyCanvasRect.canvas.addEventListener("click",canvasRectOnClick);
	canvasRectOnClick();
	var tinyCanvasCircle = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-samplecircle");
	window.document.body.appendChild(tinyCanvasCircle.canvas);
	JsDemo.initTinyCanvas(tinyCanvasCircle,JsDemo.X + JsDemo.WIDTH + JsDemo.SPACE,JsDemo.Y);
	var canvasCircleOnClick = function(event1) {
		var minDist1 = 15;
		var radius = tinyCanvasCircle.canvas.width * .45;
		var drawRadius1 = minDist1 * .75;
		var center_y;
		var center_x = tinyCanvasCircle.canvas.width * .5;
		center_y = tinyCanvasCircle.canvas.height * .5;
		var samples1 = JsDemo.generateSamplesInCircle(center_x,center_y,radius,minDist1);
		JsDemo.clearCanvas(tinyCanvasCircle,JsDemo.circlePalette);
		TinyCanvas.drawCircle(TinyCanvas.lineStyle(tinyCanvasCircle,2.,JsDemo.BOUNDS_COLOR,.75),center_x,center_y,radius);
		JsDemo.drawSamples(tinyCanvasCircle,samples1,drawRadius1,JsDemo.circlePalette);
	};
	tinyCanvasCircle.canvas.addEventListener("click",canvasCircleOnClick);
	canvasCircleOnClick();
	JsDemo.tinyCanvasPerlin = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-perlin");
	window.document.body.appendChild(JsDemo.tinyCanvasPerlin.canvas);
	JsDemo.initTinyCanvas(JsDemo.tinyCanvasPerlin,JsDemo.X + (JsDemo.WIDTH + JsDemo.SPACE) * 2,JsDemo.Y);
	var createPerlinNoise = function() {
		var perlin = new hxnoise_Perlin();
		var i32Array = new Int32Array(JsDemo.WIDTH * JsDemo.HEIGHT);
		JsDemo.noise = new Float32Array(JsDemo.WIDTH * JsDemo.HEIGHT);
		var i = 0;
		var value;
		var u8;
		var r;
		var g;
		var b;
		var _g1 = 0;
		var _g = JsDemo.HEIGHT;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = JsDemo.WIDTH;
			while(_g3 < _g2) {
				var x = _g3++;
				value = perlin.OctavePerlin(x / 8,y / 8,0.1,1,0.5,.25);
				u8 = value * 255 | 0;
				r = u8;
				g = u8;
				b = u8;
				var color = b << 16 | g << 8 | r | -16777216;
				i32Array[i] = color;
				JsDemo.noise[i] = value;
				++i;
			}
		}
		JsDemo.clearCanvas(JsDemo.tinyCanvasPerlin);
		var u8Array = new Uint8ClampedArray(i32Array.buffer);
		var imageData = new ImageData(u8Array,JsDemo.WIDTH,JsDemo.HEIGHT);
		JsDemo.tinyCanvasPerlin.context.putImageData(imageData,0,0);
	};
	createPerlinNoise();
	var tinyCanvasPerlinSample = new TinyCanvas(JsDemo.WIDTH,JsDemo.HEIGHT,"canvas-sampleperlin");
	window.document.body.appendChild(tinyCanvasPerlinSample.canvas);
	JsDemo.initTinyCanvas(tinyCanvasPerlinSample,JsDemo.tinyCanvasPerlin.canvas.offsetLeft,JsDemo.tinyCanvasPerlin.canvas.offsetTop);
	var canvasPerlinSampleOnClick = function(event2) {
		var minDist2 = 10;
		var drawRadius2 = minDist2 * .85;
		var rect_y1;
		var rect_x1;
		var rect_width1;
		var rect_height1;
		rect_x1 = 15;
		rect_y1 = 15;
		rect_width1 = tinyCanvasPerlinSample.canvas.width - 30;
		rect_height1 = tinyCanvasPerlinSample.canvas.height - 30;
		if(event2 != null) {
			var rect1 = event2.target.getBoundingClientRect();
			JsDemo.mousePos = new upd_SimplePoint(event2.clientX - rect1.left,event2.clientY - rect1.top);
		}
		var samples2 = JsDemo.generatePerlinSamples(rect_x1,rect_y1,rect_width1,rect_height1,minDist2);
		JsDemo.clearCanvas(tinyCanvasPerlinSample,JsDemo.perlinPalette);
		TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasPerlinSample,2.,JsDemo.BOUNDS_COLOR,.75),rect_x1,rect_y1,rect_width1,rect_height1);
		JsDemo.drawSamples(tinyCanvasPerlinSample,samples2,drawRadius2,JsDemo.perlinPalette);
	};
	tinyCanvasPerlinSample.canvas.addEventListener("click",canvasPerlinSampleOnClick);
	canvasPerlinSampleOnClick();
};
JsDemo.initTinyCanvas = function(tinyCanvas,x,y) {
	var style = tinyCanvas.canvas.style;
	style.position = "absolute";
	style.left = x == null ? "null" : "" + x;
	style.top = y == null ? "null" : "" + y;
	style.cursor = "hand";
};
JsDemo.generateSamplesInRect = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	return upd1.sampleRectangle(topLeft,bottomRight,minDist,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo.generateSamplesInCircle = function(cx,cy,radius,minDist) {
	var center = new upd_SimplePoint(cx,cy);
	var upd1 = new upd_UniformPoissonDisk();
	return upd1.sampleCircle(center,radius,minDist,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo.generateCustomSamples = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var reject = function(p) {
		if(!(p.x < width * .5 && p.y < height * .5)) {
			if(p.x > width * .5) {
				return p.y > height * .5;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var minDistanceFunc = function(p1) {
		var dist = Math.random();
		var dist1 = minDist * dist;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist1 < min) {
			return min;
		} else if(dist1 > minDist) {
			return minDist;
		} else {
			return dist1;
		}
	};
	return upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,null,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION,JsDemo.mousePos);
};
JsDemo.generatePerlinSamples = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var minDistanceFunc = function(p) {
		var ix = p.x | 0;
		var iy = p.y | 0;
		var i = iy * JsDemo.WIDTH + ix;
		var value = 1.0 - JsDemo.noise[i];
		var dist = minDist * value;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist < min) {
			return min;
		} else if(dist > minDist) {
			return minDist;
		} else {
			return dist;
		}
	};
	return upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,null,JsDemo.OVERRIDE_DEFAULT_POINTS_PER_ITERATION,JsDemo.mousePos);
};
JsDemo.drawSamples = function(tinyCanvas,samples,radius,palette) {
	var color = palette != null ? palette[0] : 16711680;
	var fillAlpha = .8;
	var p = samples[0];
	TinyCanvas.lineStyle(tinyCanvas,1.5,color,1);
	TinyCanvas.beginFill(tinyCanvas,color,fillAlpha);
	TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,.25);
	TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,radius);
	TinyCanvas.endFill(tinyCanvas);
	var _g = 0;
	while(_g < samples.length) {
		var p1 = samples[_g];
		++_g;
		color = JsDemo.getRandomColorFrom(palette,color);
		TinyCanvas.lineStyle(tinyCanvas,1.5,color,1);
		TinyCanvas.drawCircle(tinyCanvas,p1.x,p1.y,.25);
	}
};
JsDemo.clearCanvas = function(tinyCanvas,palette) {
	var color = palette != null ? palette[0] : 16711680;
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.clear(tinyCanvas),3,color,1),0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
};
JsDemo.getRandomColorFrom = function(palette,defaultColor) {
	if(palette == null || palette.length == 0) {
		return defaultColor;
	} else {
		return palette[Std.random(palette.length)];
	}
};
JsDemo.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
JsDemo.grabMousePos = function(mouseEvent) {
	if(mouseEvent != null) {
		var rect = mouseEvent.target.getBoundingClientRect();
		JsDemo.mousePos = new upd_SimplePoint(mouseEvent.clientX - rect.left,mouseEvent.clientY - rect.top);
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var TinyCanvas = function(width,height,id,useThisCanvas) {
	if(useThisCanvas == null) {
		this.canvas = window.document.createElement("canvas");
	} else {
		this.canvas = useThisCanvas;
	}
	this.canvas.width = width;
	this.canvas.height = height;
	this.canvas.id = id;
	this.context = this.canvas.getContext("2d",null);
};
TinyCanvas.__name__ = true;
TinyCanvas.intToRgb = function(color) {
	return { r : color >> 16 & 255, g : color >> 8 & 255, b : color & 255};
};
TinyCanvas.clear = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.clearRect(0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
	return tinyCanvas;
};
TinyCanvas.lineStyle = function(tinyCanvas,thickness,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	ctx.lineWidth = thickness;
	var rgb_r;
	var rgb_g;
	var rgb_b;
	rgb_r = color >> 16 & 255;
	rgb_g = color >> 8 & 255;
	rgb_b = color & 255;
	if(alpha != 1.0) {
		ctx.strokeStyle = "rgba(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ", " + alpha + ")";
	} else {
		ctx.strokeStyle = "rgb(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.beginFill = function(tinyCanvas,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	var rgb_r;
	var rgb_g;
	var rgb_b;
	rgb_r = color >> 16 & 255;
	rgb_g = color >> 8 & 255;
	rgb_b = color & 255;
	if(alpha != 1.0) {
		ctx.fillStyle = "rgba(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ", " + alpha + ")";
	} else {
		ctx.fillStyle = "rgb(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.endFill = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.fill();
	return tinyCanvas;
};
TinyCanvas.moveTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	return tinyCanvas;
};
TinyCanvas.lineTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.lineTo(x,y);
	return tinyCanvas;
};
TinyCanvas.quadTo = function(tinyCanvas,cx,cy,ax,ay) {
	var ctx = tinyCanvas.context;
	ctx.quadraticCurveTo(cx,cy,ax,ay);
	return tinyCanvas;
};
TinyCanvas.stroke = function(tinyCanvas,closePath) {
	if(closePath == null) {
		closePath = true;
	}
	var ctx = tinyCanvas.context;
	ctx.stroke();
	if(closePath) {
		ctx.closePath();
	}
	return tinyCanvas;
};
TinyCanvas.drawCircle = function(tinyCanvas,x,y,radius) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.arc(x,y,radius,0,2 * Math.PI,false);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.drawRect = function(tinyCanvas,x,y,width,height) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	ctx.lineTo(x + width,y);
	ctx.lineTo(x + width,y + height);
	ctx.lineTo(x,y + height);
	ctx.lineTo(x,y);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.main = function() {
	var tinyCanvas = new TinyCanvas(300,300,"canvas");
	window.document.body.appendChild(tinyCanvas.canvas);
	TinyCanvas.lineStyle(tinyCanvas,0,0,0);
	TinyCanvas.beginFill(tinyCanvas,65280);
	TinyCanvas.drawCircle(tinyCanvas,40,40,40);
	TinyCanvas.endFill(tinyCanvas);
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.endFill(TinyCanvas.drawRect(TinyCanvas.beginFill(tinyCanvas,16776960),0,0,40,40)),2.,16711680,1),0,0,40,40);
	TinyCanvas.quadTo(TinyCanvas.lineTo(TinyCanvas.lineTo(TinyCanvas.lineTo(TinyCanvas.moveTo(TinyCanvas.stroke(TinyCanvas.lineTo(TinyCanvas.moveTo(TinyCanvas.lineStyle(tinyCanvas,5,16777215,.5),0,0),50,50)),100,100),30,70),80,20),60,60),80,60,80,80);
	TinyCanvas.stroke(tinyCanvas);
	TinyCanvas.endFill(tinyCanvas);
};
TinyCanvas.prototype = {
	get_width: function() {
		return this.canvas.width;
	}
	,get_height: function() {
		return this.canvas.height;
	}
	,get_id: function() {
		return this.canvas.id;
	}
	,__class__: TinyCanvas
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var hxnoise_Perlin = function(repeat) {
	if(repeat == null) {
		repeat = -1;
	}
	this.repeat = repeat;
	if(hxnoise_Perlin.P == null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 512) {
			var x = _g1++;
			_g.push(hxnoise_Perlin.PERMUTATIONS[x % 256]);
		}
		hxnoise_Perlin.P = _g;
	}
};
hxnoise_Perlin.__name__ = true;
hxnoise_Perlin.grad = function(hash,x,y,z) {
	var h = hash & 15;
	var u = h < 8 ? x : y;
	var v;
	if(h < 4) {
		v = y;
	} else if(h == 12 || h == 14) {
		v = x;
	} else {
		v = z;
	}
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
};
hxnoise_Perlin.prototype = {
	perlin: function(x,y,z) {
		if(this.repeat > 0) {
			x %= this.repeat;
			y %= this.repeat;
			z %= this.repeat;
		}
		var xi = Math.floor(x) & 255;
		var yi = Math.floor(y) & 255;
		var zi = Math.floor(z) & 255;
		var xf = x - Math.floor(x);
		var yf = y - Math.floor(y);
		var zf = z - Math.floor(z);
		var u = this.fade(xf);
		var v = this.fade(yf);
		var w = this.fade(zf);
		var aaa;
		var aba;
		var aab;
		var abb;
		var baa;
		var bba;
		var bab;
		var bbb;
		aaa = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + yi] + zi];
		aba = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + this.inc(yi)] + zi];
		aab = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + yi] + this.inc(zi)];
		abb = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + this.inc(yi)] + this.inc(zi)];
		baa = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + yi] + zi];
		bba = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + this.inc(yi)] + zi];
		bab = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + yi] + this.inc(zi)];
		bbb = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + this.inc(yi)] + this.inc(zi)];
		var x1;
		var x2;
		var y1;
		var y2;
		x1 = this.lerp(hxnoise_Perlin.grad(aaa,xf,yf,zf),hxnoise_Perlin.grad(baa,xf - 1,yf,zf),u);
		x2 = this.lerp(hxnoise_Perlin.grad(aba,xf,yf - 1,zf),hxnoise_Perlin.grad(bba,xf - 1,yf - 1,zf),u);
		y1 = this.lerp(x1,x2,v);
		x1 = this.lerp(hxnoise_Perlin.grad(aab,xf,yf,zf - 1),hxnoise_Perlin.grad(bab,xf - 1,yf,zf - 1),u);
		x2 = this.lerp(hxnoise_Perlin.grad(abb,xf,yf - 1,zf - 1),hxnoise_Perlin.grad(bbb,xf - 1,yf - 1,zf - 1),u);
		y2 = this.lerp(x1,x2,v);
		return (this.lerp(y1,y2,w) + 1) / 2;
	}
	,OctavePerlin: function(x,y,z,octaves,persistence,frequency) {
		var total = 0.0;
		var maxValue = 0.0;
		var amplitude = 1.0;
		var _g1 = 0;
		var _g = octaves;
		while(_g1 < _g) {
			var i = _g1++;
			total += this.perlin(x * frequency,y * frequency,z * frequency) * amplitude;
			maxValue += amplitude;
			amplitude *= persistence;
			frequency *= 2.0;
		}
		return total / maxValue;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6 - 15) + 10);
	}
	,inc: function(num) {
		++num;
		if(this.repeat > 0) {
			num %= this.repeat;
		}
		return num;
	}
	,lerp: function(a,b,x) {
		return a + x * (b - a);
	}
	,__class__: hxnoise_Perlin
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var upd_SimplePoint = function(x,y) {
	this.x = x;
	this.y = y;
};
upd_SimplePoint.__name__ = true;
upd_SimplePoint.prototype = {
	__class__: upd_SimplePoint
};
var upd_UniformPoissonDisk = function() {
	this.pointsPerIteration = upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION;
	this.maxPointsReached = false;
};
upd_UniformPoissonDisk.__name__ = true;
upd_UniformPoissonDisk.makeConstMinDistance = function(minDistance) {
	return function(p) {
		return minDistance;
	};
};
upd_UniformPoissonDisk.prototype = {
	sampleCircle: function(center,radius,minDistance,pointsPerIteration) {
		var _gthis = this;
		var topLeft = new upd_SimplePoint(center.x - radius,center.y - radius);
		var bottomRight = new upd_SimplePoint(center.x + radius,center.y + radius);
		var radiusSquared = radius * radius;
		var reject = function(p) {
			var dx = center.x - p.x;
			var dy = center.y - p.y;
			return dx * dx + dy * dy > radiusSquared;
		};
		var minDistance1 = minDistance;
		return this.sample(topLeft,bottomRight,function(p1) {
			return minDistance1;
		},minDistance,reject,pointsPerIteration);
	}
	,sampleRectangle: function(topLeft,bottomRight,minDistance,pointsPerIteration) {
		var minDistance1 = minDistance;
		return this.sample(topLeft,bottomRight,function(p) {
			return minDistance1;
		},minDistance,null,pointsPerIteration);
	}
	,init: function(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration) {
		if(pointsPerIteration == null) {
			this.pointsPerIteration = upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION;
		}
		this.topLeft = topLeft;
		this.bottomRight = bottomRight;
		this.minDistanceFunc = minDistanceFunc;
		this.maxDistance = maxDistance;
		this.currMinDistance = 0;
		this.reject = reject;
		this.width = bottomRight.x - topLeft.x;
		this.height = bottomRight.y - topLeft.y;
		this.cellSize = maxDistance / upd_Tools.SQUARE_ROOT_TWO;
		this.gridWidth = (this.width / this.cellSize | 0) + 1;
		this.gridHeight = (this.height / this.cellSize | 0) + 1;
		this.grid = [];
		var _g1 = 0;
		var _g = this.gridHeight;
		while(_g1 < _g) {
			var y = _g1++;
			var tmp = this.grid;
			var _g2 = [];
			var _g4 = 0;
			var _g3 = this.gridWidth;
			while(_g4 < _g3) {
				var x = _g4++;
				_g2.push(null);
			}
			tmp.push(_g2);
		}
		this.activePoints = [];
		this.sampledPoints = [];
	}
	,sample: function(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration,firstPoint) {
		this.init(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration);
		this.addFirstPoint(firstPoint);
		while(this.activePoints.length != 0 && !this.maxPointsReached) {
			var randomIndex = Std.random(this.activePoints.length);
			var point = this.activePoints[randomIndex];
			var found = false;
			this.currMinDistance = minDistanceFunc(point);
			if(this.currMinDistance < upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD) {
				throw new js__$Boot_HaxeError("Error: minDistance(" + this.currMinDistance + ") is below the threshold(" + upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD + ")!");
			}
			if(this.currMinDistance > maxDistance) {
				throw new js__$Boot_HaxeError("Error: minDistance(" + this.currMinDistance + ") is greater than maxDistance(" + maxDistance + ")!");
			}
			var _g1 = 0;
			var _g = this.pointsPerIteration;
			while(_g1 < _g) {
				var k = _g1++;
				found = this.addNextPointAround(point);
				if(found) {
					break;
				}
			}
			if(!found) {
				this.activePoints.splice(randomIndex,1);
			}
		}
		return this.sampledPoints;
	}
	,addFirstPoint: function(firstPoint) {
		if(firstPoint != null) {
			var index = this.pointToGridCoords(firstPoint,this.topLeft,this.cellSize);
			this.addSampledPoint(firstPoint,index);
			return;
		}
		var added = false;
		var tries = upd_UniformPoissonDisk.FIRST_POINT_TRIES;
		while(!added && tries > 0) {
			--tries;
			var rndX = this.topLeft.x + this.width * Math.random();
			var rndY = this.topLeft.y + this.height * Math.random();
			var p = new upd_SimplePoint(rndX,rndY);
			if(this.reject != null && this.reject(p)) {
				continue;
			}
			added = true;
			var index1 = this.pointToGridCoords(p,this.topLeft,this.cellSize);
			this.addSampledPoint(p,index1);
		}
	}
	,addNextPointAround: function(point) {
		var q = this.randomPointAround(point,this.currMinDistance);
		var mustReject = this.reject != null && this.reject(q);
		if(q.x >= this.topLeft.x && q.x < this.bottomRight.x && q.y >= this.topLeft.y && q.y < this.bottomRight.y && !mustReject) {
			var qIndex = this.pointToGridCoords(q,this.topLeft,this.cellSize);
			if(!this.isInNeighbourhood(q,qIndex)) {
				this.addSampledPoint(q,qIndex);
				return true;
			}
		}
		return false;
	}
	,isInRectangle: function(point) {
		if(point.x >= this.topLeft.x && point.x < this.bottomRight.x && point.y >= this.topLeft.y) {
			return point.y < this.bottomRight.y;
		} else {
			return false;
		}
	}
	,isInNeighbourhood: function(point,index) {
		var currMinDistanceSquared = this.currMinDistance * this.currMinDistance;
		var col = Math.max(0,index.col - 2) | 0;
		while(col < Math.min(this.gridWidth,index.col + 3)) {
			var row = Math.max(0,index.row - 2) | 0;
			while(row < Math.min(this.gridHeight,index.row + 3)) {
				var cell = this.grid[row][col];
				if(cell != null) {
					var _g = 0;
					while(_g < cell.length) {
						var p = cell[_g];
						++_g;
						var tmp;
						if(cell != null) {
							var dx = p.x - point.x;
							var dy = p.y - point.y;
							tmp = dx * dx + dy * dy < currMinDistanceSquared;
						} else {
							tmp = false;
						}
						if(tmp) {
							return true;
						}
					}
				}
				++row;
			}
			++col;
		}
		return false;
	}
	,addSampledPoint: function(point,index) {
		this.activePoints.push(point);
		this.sampledPoints.push(point);
		var cell = this.grid[index.row][index.col];
		if(cell != null) {
			cell.push(point);
		} else {
			cell = [point];
			this.grid[index.row][index.col] = cell;
		}
		if(this.sampledPoints.length > upd_UniformPoissonDisk.MAX_POINTS) {
			this.maxPointsReached = true;
			console.log("Generated more than MAX_POINTS(" + upd_UniformPoissonDisk.MAX_POINTS + ")!");
		}
	}
	,randomPointAround: function(center,minDistance) {
		var d = Math.random();
		var radius = minDistance + minDistance * d;
		d = Math.random();
		var angle = upd_Tools.TWO_PI * d;
		var x = radius * Math.sin(angle);
		var y = radius * Math.cos(angle);
		return new upd_SimplePoint(center.x + x,center.y + y);
	}
	,pointToGridCoords: function(point,topLeft,cellSize) {
		return { row : (point.x - topLeft.x) / cellSize | 0, col : (point.y - topLeft.y) / cellSize | 0};
	}
	,distanceSquared: function(p,q) {
		var dx = p.x - q.x;
		var dy = p.y - q.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p,q) {
		var dx = p.x - q.x;
		var dy = p.y - q.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,__class__: upd_UniformPoissonDisk
};
var upd_Tools = function() { };
upd_Tools.__name__ = true;
upd_Tools.randomInt = function(upperBound) {
	return Std.random(upperBound);
};
upd_Tools.randomFloat = function(upperBound) {
	if(upperBound == null) {
		upperBound = 1.0;
	}
	return Math.random() * upperBound;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
JsDemo.X = 15;
JsDemo.Y = 15;
JsDemo.SPACE = 15;
JsDemo.WIDTH = 200;
JsDemo.HEIGHT = 200;
JsDemo.BOUNDS_COLOR = 12632256;
JsDemo.RED_PALETTE = [16711680,16064512,14685461,16723984];
JsDemo.GREEN_PALETTE = [65280,62752,1433621,1113904];
JsDemo.FIRE_PALETTE = [16601145,16610051,16620879,16638337,16598019,16601145,16610051,16620879];
JsDemo.GRASS_PALETTE = [11137665,12249985,8181122,4116355,55684,5894785,12245889,8189314];
JsDemo.YELLOW_PALETTE = [15913024,15790080,16056096,16776960];
JsDemo.rectPalette = JsDemo.FIRE_PALETTE;
JsDemo.circlePalette = JsDemo.GRASS_PALETTE;
JsDemo.perlinPalette = JsDemo.YELLOW_PALETTE;
hxnoise_Perlin.PERMUTATIONS = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION = 30;
upd_UniformPoissonDisk.FIRST_POINT_TRIES = 1000;
upd_UniformPoissonDisk.MAX_POINTS = 100000;
upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD = 1;
upd_Tools.PI = Math.PI;
upd_Tools.HALF_PI = Math.PI / 2;
upd_Tools.TWO_PI = Math.PI * 2;
upd_Tools.SQUARE_ROOT_TWO = Math.sqrt(2);
JsDemo.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=JsDemo.js.map