// Generated by Haxe 3.4.0 (git build development @ 394599d)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var JsCommon = function() { };
JsCommon.__name__ = true;
JsCommon.drawSamples = function(tinyCanvas,samples,radius,palette,fill,highlightFirstPoint) {
	if(highlightFirstPoint == null) {
		highlightFirstPoint = true;
	}
	if(fill == null) {
		fill = false;
	}
	var color = palette != null ? palette[0] : 16711680;
	var fillAlpha = .25;
	if(highlightFirstPoint) {
		var p = samples[0];
		TinyCanvas.lineStyle(tinyCanvas,2,color,1);
		TinyCanvas.beginFill(tinyCanvas,color,.75);
		TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,.25);
		TinyCanvas.drawCircle(tinyCanvas,p.x,p.y,radius);
		TinyCanvas.endFill(tinyCanvas);
	}
	var _g = 0;
	while(_g < samples.length) {
		var p1 = samples[_g];
		++_g;
		TinyCanvas.lineStyle(tinyCanvas,1.5,color,1);
		if(fill) {
			TinyCanvas.beginFill(tinyCanvas,color,fillAlpha);
			TinyCanvas.drawCircle(tinyCanvas,p1.x,p1.y,radius);
			TinyCanvas.endFill(tinyCanvas);
		}
		TinyCanvas.drawCircle(tinyCanvas,p1.x,p1.y,.25);
		color = JsCommon.getRandomColorFrom(palette,color);
	}
};
JsCommon.initTinyCanvas = function(tinyCanvas,x,y) {
	var style = tinyCanvas.canvas.style;
	style.position = "absolute";
	style.left = x == null ? "null" : "" + x;
	style.top = y == null ? "null" : "" + y;
	style.cursor = "hand";
};
JsCommon.clearCanvas = function(tinyCanvas,palette) {
	var color = palette != null ? palette[0] : 16711680;
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.clear(tinyCanvas),3,color,1),0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
};
JsCommon.getRandomColorFrom = function(palette,defaultColor) {
	if(palette == null || palette.length == 0) {
		return defaultColor;
	} else {
		return palette[Std.random(palette.length)];
	}
};
JsCommon.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
JsCommon.grabMousePos = function(mouseEvent) {
	if(mouseEvent != null) {
		var rect = mouseEvent.target.getBoundingClientRect();
		var mouseX = mouseEvent.clientX - rect.left;
		var mouseY = mouseEvent.clientY - rect.top;
		if(JsCommon.mousePos == null) {
			JsCommon.mousePos = new upd_SimplePoint(0,0);
		}
		JsCommon.mousePos.x = mouseX;
		JsCommon.mousePos.y = mouseY;
	}
};
var JsDemo = function() { };
JsDemo.__name__ = true;
JsDemo.main = function() {
	JsDemo_$Simple.main();
	JsDemo_$Noise.main();
	JsDemo_$Image.main();
};
var JsDemo_$Image = function() { };
JsDemo_$Image.__name__ = true;
JsDemo_$Image.main = function() {
	var tinyCanvasPrim = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-prim");
	window.document.body.appendChild(tinyCanvasPrim.canvas);
	JsCommon.initTinyCanvas(tinyCanvasPrim,JsCommon.X + (JsCommon.WIDTH + JsCommon.SPACE) * 3,JsCommon.Y);
	JsDemo_$Image.loadImageResource("prim.png",function(image) {
		JsCommon.clearCanvas(tinyCanvasPrim);
		tinyCanvasPrim.context.drawImage(image,0,0,JsCommon.WIDTH,JsCommon.HEIGHT);
		var tinyCanvasSamplePrim = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-samplepng");
		window.document.body.appendChild(tinyCanvasSamplePrim.canvas);
		JsCommon.initTinyCanvas(tinyCanvasSamplePrim,tinyCanvasPrim.canvas.offsetLeft,tinyCanvasPrim.canvas.offsetTop);
		var canvasSamplePrimOnClick = function(event) {
			var minDist = 2;
			var drawRadius = minDist * .15;
			var rect_y;
			var rect_x;
			var rect_width;
			var rect_height;
			rect_x = 15;
			rect_y = 15;
			rect_width = tinyCanvasSamplePrim.canvas.width - 30;
			rect_height = tinyCanvasSamplePrim.canvas.height - 30;
			if(event != null) {
				var rect = event.target.getBoundingClientRect();
				var mouseX = event.clientX - rect.left;
				var mouseY = event.clientY - rect.top;
				if(JsCommon.mousePos == null) {
					JsCommon.mousePos = new upd_SimplePoint(0,0);
				}
				JsCommon.mousePos.x = mouseX;
				JsCommon.mousePos.y = mouseY;
			}
			var samples = JsDemo_$Image.generatePrimSamples(rect_x,rect_y,rect_width,rect_height,minDist,tinyCanvasPrim.context.getImageData(0,0,JsCommon.WIDTH,JsCommon.HEIGHT));
			JsCommon.clearCanvas(tinyCanvasSamplePrim,JsDemo_$Image.imagePalette);
			TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasSamplePrim,2.,JsCommon.BOUNDS_COLOR,.75),rect_x,rect_y,rect_width,rect_height);
			JsCommon.drawSamples(tinyCanvasSamplePrim,samples,drawRadius,JsDemo_$Image.imagePalette,true,true);
		};
		tinyCanvasSamplePrim.canvas.addEventListener("click",canvasSamplePrimOnClick);
		canvasSamplePrimOnClick();
	});
	var tinyCanvasFallout = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-fallout");
	window.document.body.appendChild(tinyCanvasFallout.canvas);
	JsCommon.initTinyCanvas(tinyCanvasFallout,JsCommon.X + (JsCommon.WIDTH + JsCommon.SPACE) * 4,JsCommon.Y);
	JsDemo_$Image.loadImageResource("fallout.png",function(image1) {
		JsCommon.clearCanvas(tinyCanvasFallout);
		tinyCanvasFallout.context.drawImage(image1,0,0,JsCommon.WIDTH,JsCommon.HEIGHT);
		var tinyCanvasSampleFallout = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-samplepng");
		window.document.body.appendChild(tinyCanvasSampleFallout.canvas);
		JsCommon.initTinyCanvas(tinyCanvasSampleFallout,tinyCanvasFallout.canvas.offsetLeft,tinyCanvasFallout.canvas.offsetTop);
		var canvasSampleFalloutOnClick = function(event1) {
			var minDist1 = 15;
			var drawRadius1 = minDist1 * .05;
			var rect_y1;
			var rect_x1;
			var rect_width1;
			var rect_height1;
			rect_x1 = 15;
			rect_y1 = 15;
			rect_width1 = tinyCanvasSampleFallout.canvas.width - 30;
			rect_height1 = tinyCanvasSampleFallout.canvas.height - 30;
			if(event1 != null) {
				var rect1 = event1.target.getBoundingClientRect();
				var mouseX1 = event1.clientX - rect1.left;
				var mouseY1 = event1.clientY - rect1.top;
				if(JsCommon.mousePos == null) {
					JsCommon.mousePos = new upd_SimplePoint(0,0);
				}
				JsCommon.mousePos.x = mouseX1;
				JsCommon.mousePos.y = mouseY1;
			}
			var samples1 = JsDemo_$Image.generateFalloutSamples(rect_x1,rect_y1,rect_width1,rect_height1,minDist1,tinyCanvasFallout.context.getImageData(0,0,JsCommon.WIDTH,JsCommon.HEIGHT));
			JsCommon.clearCanvas(tinyCanvasSampleFallout,JsDemo_$Image.imagePalette);
			TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasSampleFallout,2.,JsCommon.BOUNDS_COLOR,.75),rect_x1,rect_y1,rect_width1,rect_height1);
			JsCommon.drawSamples(tinyCanvasSampleFallout,samples1,drawRadius1,JsDemo_$Image.imagePalette,true,true);
		};
		tinyCanvasSampleFallout.canvas.addEventListener("click",canvasSampleFalloutOnClick);
		canvasSampleFalloutOnClick();
	});
};
JsDemo_$Image.loadImageResource = function(resourceId,onLoad) {
	var pngBytes = haxe_Resource.getBytes(resourceId);
	if(pngBytes == null) {
		throw new js__$Boot_HaxeError("Could not find resource with id \"" + resourceId + "\"!");
	}
	var image = window.document.createElement("img");
	image.onload = function() {
		onLoad(image);
	};
	var tmp = haxe_crypto_Base64.encode(pngBytes);
	image.src = "data:image/png;base64," + tmp;
};
JsDemo_$Image.generatePrimSamples = function(x,y,width,height,minDist,imageData) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var bgraBytes = imageData.data;
	var minDistanceFunc = function(p) {
		var ix = p.x | 0;
		var iy = p.y | 0;
		var i = (iy * JsCommon.WIDTH + ix) * 4;
		var value = bgraBytes[i] / 255;
		var dist = minDist * value;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist < min) {
			return min;
		} else if(dist > minDist) {
			return minDist;
		} else {
			return dist;
		}
	};
	var reject = function(p1) {
		var ix1 = p1.x | 0;
		var iy1 = p1.y | 0;
		var i1 = (iy1 * JsCommon.WIDTH + ix1) * 4;
		var value1 = bgraBytes[i1] / 255;
		if(!(value1 < .6)) {
			return value1 > .8;
		} else {
			return true;
		}
	};
	upd1.firstPoint = JsCommon.mousePos;
	return upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,reject,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo_$Image.generateFalloutSamples = function(x,y,width,height,minDist,imageData) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var bgraBytes = imageData.data;
	var center_y;
	var center_x = x + width * .5;
	center_y = y + height * .5;
	var radius = Math.min(width,height) * .5;
	var minDistanceFunc = function(p) {
		var ix = p.x | 0;
		var iy = p.y | 0;
		var i = (iy * JsCommon.WIDTH + ix) * 4;
		var value = bgraBytes[i] / 255;
		var dist = minDist * value;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist < min) {
			return min;
		} else if(dist > minDist) {
			return minDist;
		} else {
			return dist;
		}
	};
	var reject = function(p1) {
		var dx = p1.x - center_x;
		var dy = p1.y - center_y;
		return dx * dx + dy * dy > radius * radius;
	};
	upd1.firstPoint = JsCommon.mousePos;
	return upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,reject,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
var JsDemo_$Noise = function() { };
JsDemo_$Noise.__name__ = true;
JsDemo_$Noise.main = function() {
	JsDemo_$Noise.tinyCanvasPerlin = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-perlin");
	window.document.body.appendChild(JsDemo_$Noise.tinyCanvasPerlin.canvas);
	JsCommon.initTinyCanvas(JsDemo_$Noise.tinyCanvasPerlin,JsCommon.X + (JsCommon.WIDTH + JsCommon.SPACE) * 2,JsCommon.Y);
	JsDemo_$Noise.createPerlinNoise();
	JsCommon.clearCanvas(JsDemo_$Noise.tinyCanvasPerlin);
	var u8Array = new Uint8ClampedArray(JsDemo_$Noise.noiseData.buffer);
	var imageData = new ImageData(u8Array,JsCommon.WIDTH,JsCommon.HEIGHT);
	JsDemo_$Noise.tinyCanvasPerlin.context.putImageData(imageData,0,0);
	var tinyCanvasPerlinSample = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-sampleperlin");
	window.document.body.appendChild(tinyCanvasPerlinSample.canvas);
	JsCommon.initTinyCanvas(tinyCanvasPerlinSample,JsDemo_$Noise.tinyCanvasPerlin.canvas.offsetLeft,JsDemo_$Noise.tinyCanvasPerlin.canvas.offsetTop);
	var canvasPerlinSampleOnClick = function(event) {
		var minDist = 10;
		var drawRadius = minDist * .25;
		var rect_y;
		var rect_x;
		var rect_width;
		var rect_height;
		rect_x = 15;
		rect_y = 15;
		rect_width = tinyCanvasPerlinSample.canvas.width - 30;
		rect_height = tinyCanvasPerlinSample.canvas.height - 30;
		if(event != null) {
			var rect = event.target.getBoundingClientRect();
			var mouseX = event.clientX - rect.left;
			var mouseY = event.clientY - rect.top;
			if(JsCommon.mousePos == null) {
				JsCommon.mousePos = new upd_SimplePoint(0,0);
			}
			JsCommon.mousePos.x = mouseX;
			JsCommon.mousePos.y = mouseY;
		}
		var samples = JsDemo_$Noise.generatePerlinSamples(rect_x,rect_y,rect_width,rect_height,minDist);
		JsCommon.clearCanvas(tinyCanvasPerlinSample,JsDemo_$Noise.perlinPalette);
		TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasPerlinSample,2.,JsCommon.BOUNDS_COLOR,.75),rect_x,rect_y,rect_width,rect_height);
		JsCommon.drawSamples(tinyCanvasPerlinSample,samples,drawRadius,JsDemo_$Noise.perlinPalette,false,true);
	};
	tinyCanvasPerlinSample.canvas.addEventListener("click",canvasPerlinSampleOnClick);
	canvasPerlinSampleOnClick();
};
JsDemo_$Noise.createPerlinNoise = function() {
	var perlin = new hxnoise_Perlin();
	JsDemo_$Noise.noiseData = new Int32Array(JsCommon.WIDTH * JsCommon.HEIGHT);
	JsDemo_$Noise.noise = new Float32Array(JsCommon.WIDTH * JsCommon.HEIGHT);
	var i = 0;
	var value;
	var u8;
	var r;
	var g;
	var b;
	var _g1 = 0;
	var _g = JsCommon.HEIGHT;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = JsCommon.WIDTH;
		while(_g3 < _g2) {
			var x = _g3++;
			value = perlin.OctavePerlin(x / 8,y / 8,0.1,1,0.5,.25);
			u8 = value * 255 | 0;
			r = u8;
			g = u8;
			b = u8;
			var color = b << 16 | g << 8 | r | -16777216;
			JsDemo_$Noise.noiseData[i] = color;
			JsDemo_$Noise.noise[i] = value;
			++i;
		}
	}
};
JsDemo_$Noise.generatePerlinSamples = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var minDistanceFunc = function(p) {
		var ix = p.x | 0;
		var iy = p.y | 0;
		var i = iy * JsCommon.WIDTH + ix;
		var value = 1.0 - JsDemo_$Noise.noise[i];
		var dist = minDist * value;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist < min) {
			return min;
		} else if(dist > minDist) {
			return minDist;
		} else {
			return dist;
		}
	};
	var reject = function(p1) {
		var ix1 = p1.x | 0;
		var iy1 = p1.y | 0;
		var i1 = iy1 * JsCommon.WIDTH + ix1;
		var value1 = JsDemo_$Noise.noise[i1];
		return value1 < .49;
	};
	upd1.firstPoint = JsCommon.mousePos;
	var samples = upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,null,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
	return samples;
};
var JsDemo_$Simple = function() { };
JsDemo_$Simple.__name__ = true;
JsDemo_$Simple.main = function() {
	var tinyCanvasRect = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-samplerect");
	window.document.body.appendChild(tinyCanvasRect.canvas);
	JsCommon.initTinyCanvas(tinyCanvasRect,JsCommon.X,JsCommon.Y);
	var canvasRectOnClick = function(event) {
		var minDist = 8;
		var drawRadius = minDist * .75;
		var rect_y;
		var rect_x;
		var rect_width;
		var rect_height;
		rect_x = 15;
		rect_y = 15;
		rect_width = tinyCanvasRect.canvas.width - 30;
		rect_height = tinyCanvasRect.canvas.height - 30;
		if(event != null) {
			var rect = event.target.getBoundingClientRect();
			var mouseX = event.clientX - rect.left;
			var mouseY = event.clientY - rect.top;
			if(JsCommon.mousePos == null) {
				JsCommon.mousePos = new upd_SimplePoint(0,0);
			}
			JsCommon.mousePos.x = mouseX;
			JsCommon.mousePos.y = mouseY;
		}
		var samples = JsDemo_$Simple.generateSamplesInRect(rect_x,rect_y,rect_width,rect_height,minDist);
		JsCommon.clearCanvas(tinyCanvasRect,JsDemo_$Simple.rectPalette);
		TinyCanvas.drawRect(TinyCanvas.lineStyle(tinyCanvasRect,2.,JsCommon.BOUNDS_COLOR,.75),rect_x,rect_y,rect_width,rect_height);
		JsCommon.drawSamples(tinyCanvasRect,samples,drawRadius,JsDemo_$Simple.rectPalette);
	};
	tinyCanvasRect.canvas.addEventListener("click",canvasRectOnClick);
	canvasRectOnClick();
	var tinyCanvasCircle = new TinyCanvas(JsCommon.WIDTH,JsCommon.HEIGHT,"canvas-samplecircle");
	window.document.body.appendChild(tinyCanvasCircle.canvas);
	JsCommon.initTinyCanvas(tinyCanvasCircle,JsCommon.X + JsCommon.WIDTH + JsCommon.SPACE,JsCommon.Y);
	var canvasCircleOnClick = function(event1) {
		var minDist1 = 8;
		var radius = tinyCanvasCircle.canvas.width * .45;
		var drawRadius1 = minDist1 * .75;
		var center_y;
		var center_x = tinyCanvasCircle.canvas.width * .5;
		center_y = tinyCanvasCircle.canvas.height * .5;
		if(event1 != null) {
			var rect1 = event1.target.getBoundingClientRect();
			var mouseX1 = event1.clientX - rect1.left;
			var mouseY1 = event1.clientY - rect1.top;
			if(JsCommon.mousePos == null) {
				JsCommon.mousePos = new upd_SimplePoint(0,0);
			}
			JsCommon.mousePos.x = mouseX1;
			JsCommon.mousePos.y = mouseY1;
		}
		var samples1 = JsDemo_$Simple.generateSamplesInCircle(center_x,center_y,radius,minDist1);
		JsCommon.clearCanvas(tinyCanvasCircle,JsDemo_$Simple.circlePalette);
		TinyCanvas.drawCircle(TinyCanvas.lineStyle(tinyCanvasCircle,2.,JsCommon.BOUNDS_COLOR,.75),center_x,center_y,radius);
		JsCommon.drawSamples(tinyCanvasCircle,samples1,drawRadius1,JsDemo_$Simple.circlePalette);
	};
	tinyCanvasCircle.canvas.addEventListener("click",canvasCircleOnClick);
	canvasCircleOnClick();
};
JsDemo_$Simple.generateSamplesInRect = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	upd1.firstPoint = JsCommon.mousePos;
	return upd1.sampleRectangle(topLeft,bottomRight,minDist,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo_$Simple.generateSamplesInCircle = function(cx,cy,radius,minDist) {
	var center = new upd_SimplePoint(cx,cy);
	var upd1 = new upd_UniformPoissonDisk();
	upd1.firstPoint = JsCommon.mousePos;
	return upd1.sampleCircle(center,radius,minDist,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
JsDemo_$Simple.generateCustomSamples = function(x,y,width,height,minDist) {
	var topLeft = new upd_SimplePoint(x,y);
	var bottomRight = new upd_SimplePoint(x + width,y + height);
	var upd1 = new upd_UniformPoissonDisk();
	var reject = function(p) {
		if(!(p.x < width * .5 && p.y < height * .5)) {
			if(p.x > width * .5) {
				return p.y > height * .5;
			} else {
				return false;
			}
		} else {
			return true;
		}
	};
	var minDistanceFunc = function(p1) {
		var dist = Math.random();
		var dist1 = minDist * dist;
		var min = upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD;
		if(dist1 < min) {
			return min;
		} else if(dist1 > minDist) {
			return minDist;
		} else {
			return dist1;
		}
	};
	upd1.firstPoint = JsCommon.mousePos;
	return upd1.sample(topLeft,bottomRight,minDistanceFunc,minDist,null,JsCommon.OVERRIDE_DEFAULT_POINTS_PER_ITERATION);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var TinyCanvas = function(width,height,id,useThisCanvas) {
	if(useThisCanvas == null) {
		this.canvas = window.document.createElement("canvas");
	} else {
		this.canvas = useThisCanvas;
	}
	this.canvas.width = width;
	this.canvas.height = height;
	this.canvas.id = id;
	this.context = this.canvas.getContext("2d",null);
};
TinyCanvas.__name__ = true;
TinyCanvas.intToRgb = function(color) {
	return { r : color >> 16 & 255, g : color >> 8 & 255, b : color & 255};
};
TinyCanvas.clear = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.clearRect(0,0,tinyCanvas.canvas.width,tinyCanvas.canvas.height);
	return tinyCanvas;
};
TinyCanvas.lineStyle = function(tinyCanvas,thickness,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	ctx.lineWidth = thickness;
	var rgb_r;
	var rgb_g;
	var rgb_b;
	rgb_r = color >> 16 & 255;
	rgb_g = color >> 8 & 255;
	rgb_b = color & 255;
	if(alpha != 1.0) {
		ctx.strokeStyle = "rgba(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ", " + alpha + ")";
	} else {
		ctx.strokeStyle = "rgb(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.beginFill = function(tinyCanvas,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var ctx = tinyCanvas.context;
	var rgb_r;
	var rgb_g;
	var rgb_b;
	rgb_r = color >> 16 & 255;
	rgb_g = color >> 8 & 255;
	rgb_b = color & 255;
	if(alpha != 1.0) {
		ctx.fillStyle = "rgba(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ", " + alpha + ")";
	} else {
		ctx.fillStyle = "rgb(" + rgb_r + ", " + rgb_g + ", " + rgb_b + ")";
	}
	return tinyCanvas;
};
TinyCanvas.endFill = function(tinyCanvas) {
	var ctx = tinyCanvas.context;
	ctx.fill();
	return tinyCanvas;
};
TinyCanvas.moveTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	return tinyCanvas;
};
TinyCanvas.lineTo = function(tinyCanvas,x,y) {
	var ctx = tinyCanvas.context;
	ctx.lineTo(x,y);
	return tinyCanvas;
};
TinyCanvas.quadTo = function(tinyCanvas,cx,cy,ax,ay) {
	var ctx = tinyCanvas.context;
	ctx.quadraticCurveTo(cx,cy,ax,ay);
	return tinyCanvas;
};
TinyCanvas.stroke = function(tinyCanvas,closePath) {
	if(closePath == null) {
		closePath = true;
	}
	var ctx = tinyCanvas.context;
	ctx.stroke();
	if(closePath) {
		ctx.closePath();
	}
	return tinyCanvas;
};
TinyCanvas.drawCircle = function(tinyCanvas,x,y,radius) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.arc(x,y,radius,0,2 * Math.PI,false);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.drawRect = function(tinyCanvas,x,y,width,height) {
	var ctx = tinyCanvas.context;
	ctx.beginPath();
	ctx.moveTo(x,y);
	ctx.lineTo(x + width,y);
	ctx.lineTo(x + width,y + height);
	ctx.lineTo(x,y + height);
	ctx.lineTo(x,y);
	ctx.stroke();
	ctx.closePath();
	return tinyCanvas;
};
TinyCanvas.main = function() {
	var tinyCanvas = new TinyCanvas(300,300,"canvas");
	window.document.body.appendChild(tinyCanvas.canvas);
	TinyCanvas.lineStyle(tinyCanvas,0,0,0);
	TinyCanvas.beginFill(tinyCanvas,65280);
	TinyCanvas.drawCircle(tinyCanvas,40,40,40);
	TinyCanvas.endFill(tinyCanvas);
	TinyCanvas.drawRect(TinyCanvas.lineStyle(TinyCanvas.endFill(TinyCanvas.drawRect(TinyCanvas.beginFill(tinyCanvas,16776960),0,0,40,40)),2.,16711680,1),0,0,40,40);
	TinyCanvas.quadTo(TinyCanvas.lineTo(TinyCanvas.lineTo(TinyCanvas.lineTo(TinyCanvas.moveTo(TinyCanvas.stroke(TinyCanvas.lineTo(TinyCanvas.moveTo(TinyCanvas.lineStyle(tinyCanvas,5,16777215,.5),0,0),50,50)),100,100),30,70),80,20),60,60),80,60,80,80);
	TinyCanvas.stroke(tinyCanvas);
	TinyCanvas.endFill(tinyCanvas);
};
TinyCanvas.prototype = {
	get_width: function() {
		return this.canvas.width;
	}
	,get_height: function() {
		return this.canvas.height;
	}
	,get_id: function() {
		return this.canvas.id;
	}
	,__class__: TinyCanvas
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var hxnoise_Perlin = function(repeat) {
	if(repeat == null) {
		repeat = -1;
	}
	this.repeat = repeat;
	if(hxnoise_Perlin.P == null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 512) {
			var x = _g1++;
			_g.push(hxnoise_Perlin.PERMUTATIONS[x % 256]);
		}
		hxnoise_Perlin.P = _g;
	}
};
hxnoise_Perlin.__name__ = true;
hxnoise_Perlin.grad = function(hash,x,y,z) {
	var h = hash & 15;
	var u = h < 8 ? x : y;
	var v;
	if(h < 4) {
		v = y;
	} else if(h == 12 || h == 14) {
		v = x;
	} else {
		v = z;
	}
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
};
hxnoise_Perlin.prototype = {
	perlin: function(x,y,z) {
		if(this.repeat > 0) {
			x %= this.repeat;
			y %= this.repeat;
			z %= this.repeat;
		}
		var xi = Math.floor(x) & 255;
		var yi = Math.floor(y) & 255;
		var zi = Math.floor(z) & 255;
		var xf = x - Math.floor(x);
		var yf = y - Math.floor(y);
		var zf = z - Math.floor(z);
		var u = this.fade(xf);
		var v = this.fade(yf);
		var w = this.fade(zf);
		var aaa;
		var aba;
		var aab;
		var abb;
		var baa;
		var bba;
		var bab;
		var bbb;
		aaa = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + yi] + zi];
		aba = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + this.inc(yi)] + zi];
		aab = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + yi] + this.inc(zi)];
		abb = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[xi] + this.inc(yi)] + this.inc(zi)];
		baa = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + yi] + zi];
		bba = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + this.inc(yi)] + zi];
		bab = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + yi] + this.inc(zi)];
		bbb = hxnoise_Perlin.P[hxnoise_Perlin.P[hxnoise_Perlin.P[this.inc(xi)] + this.inc(yi)] + this.inc(zi)];
		var x1;
		var x2;
		var y1;
		var y2;
		x1 = this.lerp(hxnoise_Perlin.grad(aaa,xf,yf,zf),hxnoise_Perlin.grad(baa,xf - 1,yf,zf),u);
		x2 = this.lerp(hxnoise_Perlin.grad(aba,xf,yf - 1,zf),hxnoise_Perlin.grad(bba,xf - 1,yf - 1,zf),u);
		y1 = this.lerp(x1,x2,v);
		x1 = this.lerp(hxnoise_Perlin.grad(aab,xf,yf,zf - 1),hxnoise_Perlin.grad(bab,xf - 1,yf,zf - 1),u);
		x2 = this.lerp(hxnoise_Perlin.grad(abb,xf,yf - 1,zf - 1),hxnoise_Perlin.grad(bbb,xf - 1,yf - 1,zf - 1),u);
		y2 = this.lerp(x1,x2,v);
		return (this.lerp(y1,y2,w) + 1) / 2;
	}
	,OctavePerlin: function(x,y,z,octaves,persistence,frequency) {
		var total = 0.0;
		var maxValue = 0.0;
		var amplitude = 1.0;
		var _g1 = 0;
		var _g = octaves;
		while(_g1 < _g) {
			var i = _g1++;
			total += this.perlin(x * frequency,y * frequency,z * frequency) * amplitude;
			maxValue += amplitude;
			amplitude *= persistence;
			frequency *= 2.0;
		}
		return total / maxValue;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6 - 15) + 10);
	}
	,inc: function(num) {
		++num;
		if(this.repeat > 0) {
			num %= this.repeat;
		}
		return num;
	}
	,lerp: function(a,b,x) {
		return a + x * (b - a);
	}
	,__class__: hxnoise_Perlin
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var upd_SimplePoint = function(x,y) {
	this.x = x;
	this.y = y;
};
upd_SimplePoint.__name__ = true;
upd_SimplePoint.prototype = {
	__class__: upd_SimplePoint
};
var upd_UniformPoissonDisk = function(firstPoint) {
	this.pointsPerIteration = upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION;
	this.maxPointsReached = false;
	if(firstPoint != null) {
		this.firstPoint = firstPoint;
	}
};
upd_UniformPoissonDisk.__name__ = true;
upd_UniformPoissonDisk.makeConstMinDistance = function(minDistance) {
	return function(p) {
		return minDistance;
	};
};
upd_UniformPoissonDisk.prototype = {
	sampleCircle: function(center,radius,minDistance,pointsPerIteration) {
		var _gthis = this;
		var topLeft = new upd_SimplePoint(center.x - radius,center.y - radius);
		var bottomRight = new upd_SimplePoint(center.x + radius,center.y + radius);
		var radiusSquared = radius * radius;
		var reject = function(p) {
			var dx = center.x - p.x;
			var dy = center.y - p.y;
			return dx * dx + dy * dy > radiusSquared;
		};
		var minDistance1 = minDistance;
		return this.sample(topLeft,bottomRight,function(p1) {
			return minDistance1;
		},minDistance,reject,pointsPerIteration);
	}
	,sampleRectangle: function(topLeft,bottomRight,minDistance,pointsPerIteration) {
		var minDistance1 = minDistance;
		return this.sample(topLeft,bottomRight,function(p) {
			return minDistance1;
		},minDistance,null,pointsPerIteration);
	}
	,init: function(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration) {
		if(pointsPerIteration == null) {
			this.pointsPerIteration = upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION;
		} else {
			this.pointsPerIteration = pointsPerIteration;
		}
		this.topLeft = topLeft;
		this.bottomRight = bottomRight;
		this.minDistanceFunc = minDistanceFunc;
		if(maxDistance > upd_UniformPoissonDisk.MAX_DISTANCE_THRESHOLD) {
			throw new js__$Boot_HaxeError("Error: maxDistance(" + maxDistance + ") is greater than MAX_DISTANCE_THRESHOLD(" + upd_UniformPoissonDisk.MAX_DISTANCE_THRESHOLD + ")!");
		}
		this.maxDistance = maxDistance;
		this.currMinDistance = 0;
		this.reject = reject;
		this.width = bottomRight.x - topLeft.x;
		this.height = bottomRight.y - topLeft.y;
		this.cellSize = maxDistance / upd_UpdTools.SQUARE_ROOT_TWO;
		this.gridWidth = (this.width / this.cellSize | 0) + 1;
		this.gridHeight = (this.height / this.cellSize | 0) + 1;
		this.grid = [];
		var _g1 = 0;
		var _g = this.gridHeight;
		while(_g1 < _g) {
			var y = _g1++;
			var tmp = this.grid;
			var _g2 = [];
			var _g4 = 0;
			var _g3 = this.gridWidth;
			while(_g4 < _g3) {
				var x = _g4++;
				_g2.push(null);
			}
			tmp.push(_g2);
		}
		this.activePoints = [];
		this.sampledPoints = [];
	}
	,sample: function(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration) {
		this.init(topLeft,bottomRight,minDistanceFunc,maxDistance,reject,pointsPerIteration);
		this.addFirstPoint();
		while(this.activePoints.length != 0 && !this.maxPointsReached) {
			var randomIndex = Std.random(this.activePoints.length);
			var point = this.activePoints[randomIndex];
			var found = false;
			this.currMinDistance = minDistanceFunc(point);
			if(this.currMinDistance < upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD) {
				throw new js__$Boot_HaxeError("Error: currMinDistance(" + this.currMinDistance + ") is lower than MIN_DISTANCE_THRESHOLD(" + upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD + ")!");
			}
			if(this.currMinDistance > maxDistance) {
				throw new js__$Boot_HaxeError("Error: currMinDistance(" + this.currMinDistance + ") is greater than maxDistance(" + maxDistance + ")!");
			}
			var _g1 = 0;
			var _g = this.pointsPerIteration;
			while(_g1 < _g) {
				var k = _g1++;
				found = this.addNextPointAround(point);
				if(found) {
					break;
				}
			}
			if(!found) {
				this.activePoints.splice(randomIndex,1);
			}
		}
		return this.sampledPoints;
	}
	,addFirstPoint: function() {
		if(this.firstPoint != null) {
			var index = this.pointToGridCoords(this.firstPoint,this.topLeft,this.cellSize);
			this.addSampledPoint(this.firstPoint,index);
			return;
		}
		var added = false;
		var tries = upd_UniformPoissonDisk.FIRST_POINT_TRIES;
		while(!added && tries > 0) {
			--tries;
			var rndX = this.topLeft.x + this.width * Math.random();
			var rndY = this.topLeft.y + this.height * Math.random();
			var p = new upd_SimplePoint(rndX,rndY);
			if(this.reject != null && this.reject(p)) {
				continue;
			}
			added = true;
			var index1 = this.pointToGridCoords(p,this.topLeft,this.cellSize);
			this.addSampledPoint(p,index1);
		}
	}
	,addNextPointAround: function(point) {
		var q = this.randomPointAround(point,this.currMinDistance);
		var mustReject = this.reject != null && this.reject(q);
		if(q.x >= this.topLeft.x && q.x < this.bottomRight.x && q.y >= this.topLeft.y && q.y < this.bottomRight.y && !mustReject) {
			var qIndex = this.pointToGridCoords(q,this.topLeft,this.cellSize);
			if(!this.isInNeighbourhood(q,qIndex)) {
				this.addSampledPoint(q,qIndex);
				return true;
			}
		}
		return false;
	}
	,isInRectangle: function(point) {
		if(point.x >= this.topLeft.x && point.x < this.bottomRight.x && point.y >= this.topLeft.y) {
			return point.y < this.bottomRight.y;
		} else {
			return false;
		}
	}
	,isInNeighbourhood: function(point,index) {
		var currMinDistanceSquared = this.currMinDistance * this.currMinDistance;
		var col = Math.max(0,index.col - 2) | 0;
		while(col < Math.min(this.gridWidth,index.col + 3)) {
			var row = Math.max(0,index.row - 2) | 0;
			while(row < Math.min(this.gridHeight,index.row + 3)) {
				var cell = this.grid[row][col];
				if(cell != null) {
					var _g = 0;
					while(_g < cell.length) {
						var p = cell[_g];
						++_g;
						var tmp;
						if(cell != null) {
							var dx = p.x - point.x;
							var dy = p.y - point.y;
							tmp = dx * dx + dy * dy < currMinDistanceSquared;
						} else {
							tmp = false;
						}
						if(tmp) {
							return true;
						}
					}
				}
				++row;
			}
			++col;
		}
		return false;
	}
	,addSampledPoint: function(point,index) {
		this.activePoints.push(point);
		this.sampledPoints.push(point);
		var cell = this.grid[index.row][index.col];
		if(cell != null) {
			cell.push(point);
		} else {
			cell = [point];
			this.grid[index.row][index.col] = cell;
		}
		if(this.sampledPoints.length > upd_UniformPoissonDisk.MAX_POINTS) {
			this.maxPointsReached = true;
			console.log("Generated more than MAX_POINTS(" + upd_UniformPoissonDisk.MAX_POINTS + ")!");
		}
	}
	,randomPointAround: function(center,minDistance) {
		var d = Math.random();
		var radius = minDistance + minDistance * d;
		d = Math.random();
		var angle = upd_UpdTools.TWO_PI * d;
		var x = radius * Math.sin(angle);
		var y = radius * Math.cos(angle);
		return new upd_SimplePoint(center.x + x,center.y + y);
	}
	,pointToGridCoords: function(point,topLeft,cellSize) {
		return { row : (point.y - topLeft.y) / cellSize | 0, col : (point.x - topLeft.x) / cellSize | 0};
	}
	,distanceSquared: function(p,q) {
		var dx = p.x - q.x;
		var dy = p.y - q.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p,q) {
		var dx = p.x - q.x;
		var dy = p.y - q.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,__class__: upd_UniformPoissonDisk
};
var upd_UpdTools = function() { };
upd_UpdTools.__name__ = true;
upd_UpdTools.randomInt = function(upperBound) {
	return Std.random(upperBound);
};
upd_UpdTools.randomFloat = function(upperBound) {
	if(upperBound == null) {
		upperBound = 1.0;
	}
	return Math.random() * upperBound;
};
upd_UpdTools.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "fallout.png", data : ""},{ name : "prim.png", data : "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAIAAAD2HxkiAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAF20lEQVR4nO3dQW7rNhRAUafoFn8W6SwynRYtogFB8z7F50wDW4ztCw4oUh/P5/MBdP6qBwDvToQQEyHERAgxEUJMhBATIcRECDERQkyEEBMhxEQIMRFCTIQQEyHERAgxEULs77WX/fnzZ+84ln19ff30pyGDXBvh/P/rcYdBLo/w4oWfn58//WntnAozIcRECDERQkyEEBMhxEQIMRFCTIQQW1ysv1jKfIXtK7+Hx7/X8uDX7g3Y7tYf/uPx+P7+/ulPa/+amRBiIoSYCCEmQoiJEGIihJgIISZCiO3fWb99I/nySLa/4ZCN5Ic3rZ/8hC8M+fBfwUwIMRFCTIQQEyHERAgxEUJMhBATIcQWF+sPW1vKH7KGe3gjuT3y/zZ/hA8zIeRECDERQkyEEBMhxEQIMRFCTIQQEyHE9t8xs3afyvLdLfNvptl+msMrRjL/Y1wzf4QPMyHkRAgxEUJMhBATIcRECDERQkyEEFtcrD98asD2JVdnQGwx5F97xTNOTjITQkyEEBMhxEQIMRFCTIQQEyHERAixxcX6ORuWt4/k7tvPD59ssPCGFx/jyWX3V3wva4M0E0JMhBATIcRECDERQkyEEBMhxEQIsdvvrF9b+T3p8CrzLfaS77X2Ly9/UNt/V2ZCiIkQYiKEmAghJkKIiRBiIoSYCCE2ZWf9nNX/Ia+as5S83ZC9/3OYCSEmQoiJEGIihJgIISZCiIkQYiKE2OJi/YVXbHXfvpR/6+3ntx48/2cmhJgIISZCiIkQYiKEmAghJkKIiRBi+xfr18xZxz/5sPU5x/ufvNwtPpA1nlkPtyRCiIkQYiKEmAghJkKIiRBiIoTY0WfW/+Kj3ecYcgrBkK9seYn/5PEFZkKIiRBiIoSYCCEmQoiJEGIihJgIIbb/mfXb900vj2SIOY9oH/JZDRnGsu0/YzMhxEQIMRFCTIQQEyHERAgxEUJMhBCbcgz+td+6uXuOISf8nzRkGA8zIeRECDERQkyEEBMhxEQIMRFCTIQQ279YP2cj+fbLXbzq8/Pzpz89n8+Fa93iEe1r1sa/fW19zsdoJoSYCCEmQoiJEGIihJgIISZCiIkQYiKE2OIdM9vPm7h+w/lnJVzcFnN4hNsvt/aGQ76XZSfHbyaEmAghJkKIiRBiIoSYCCEmQoiJEGKLi/Vzjga4MGSQtzi547eeprE8+JNncJgJISZCiIkQYiKEmAghJkKIiRBiIoTYx9qTEn6xtV38J/f+X68jn7zckGttf9X1C7czE0JMhBATIcRECDERQkyEEBMhxEQIsSk765ePwZ/v5B7t5cttN//JBdfsrIc3IkKIiRBiIoSYCCEmQoiJEGIihNiUZ9YvO7xvfcHdn1l/cvV/bfCv+ITtrIc3IkKIiRBiIoSYCCEmQoiJEGIihNiUnfWvWBGev8f8wuGd9Sfvvtg+wjk/Hjvr4ZZECDERQkyEEBMhxEQIMRFCTIQQm7Kz/hXH4A85bn37KvPd1/G3fy+vuNPAznp4IyKEmAghJkKIiRBiIoSYCCEmQohN2Vm/7BbbtPe6+0byk1/ZLW5sMBNCTIQQEyHERAgxEUJMhBATIcRECLHFxfoLh9fBT+6AnrNH/uR7zl/HXzPk4IWHmRByIoSYCCEmQoiJEGIihJgIISZCiO1frD9szir5T97zrPsh1zp8ToKd9XBLIoSYCCEmQoiJEGIihJgIISZCiB19Zv0rzBnJT+YcNbD9cvOvNf/n8TATQk6EEBMhxEQIMRFCTIQQEyHERAgxz6znTc15KIOZEGIihJgIISZCiIkQYiKEmAghJkKIiRBi+59F8YtPc9ju8I07Jy+3dq35r3q84HdlJoSYCCEmQoiJEGIihJgIISZCiIkQYvsX6/mPwwdwnLzc/NshbsFMCDERQkyEEBMhxEQIMRFCTIQQEyHEPp7PZz0GeGtmQoiJEGIihJgIISZCiIkQYiKEmAghJkKIiRBiIoSYCCEmQoiJEGIihJgIISZCiP0DxjLNkUDgcJsAAAAASUVORK5CYII"}];
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
JsCommon.X = 15;
JsCommon.Y = 15;
JsCommon.SPACE = 15;
JsCommon.WIDTH = 200;
JsCommon.HEIGHT = 200;
JsCommon.BOUNDS_COLOR = 12632256;
JsCommon.RED_PALETTE = [16711680,16064512,14685461,16723984];
JsCommon.GREEN_PALETTE = [65280,62752,1433621,1113904];
JsCommon.FIRE_PALETTE = [16601145,16610051,16620879,16638337,16598019,16601145,16610051,16620879];
JsCommon.GRASS_PALETTE = [11137665,12249985,8181122,4116355,55684,5894785,12245889,8189314];
JsCommon.OCEAN_PALETTE = [11108850,12222955,8159957,4096975,34009,5865970,12222939,8159989];
JsCommon.YELLOW_PALETTE = [15913024,15790080,16056096,16776960];
JsDemo_$Image.imagePalette = JsCommon.FIRE_PALETTE;
JsDemo_$Noise.perlinPalette = JsCommon.YELLOW_PALETTE;
JsDemo_$Simple.rectPalette = JsCommon.FIRE_PALETTE;
JsDemo_$Simple.circlePalette = JsCommon.GRASS_PALETTE;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
hxnoise_Perlin.PERMUTATIONS = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
upd_UniformPoissonDisk.DEFAULT_POINTS_PER_ITERATION = 30;
upd_UniformPoissonDisk.FIRST_POINT_TRIES = 1000;
upd_UniformPoissonDisk.MAX_POINTS = 100000;
upd_UniformPoissonDisk.MIN_DISTANCE_THRESHOLD = .75;
upd_UniformPoissonDisk.MAX_DISTANCE_THRESHOLD = 10000;
upd_UpdTools.PI = Math.PI;
upd_UpdTools.HALF_PI = Math.PI / 2;
upd_UpdTools.TWO_PI = Math.PI * 2;
upd_UpdTools.SQUARE_ROOT_TWO = Math.sqrt(2);
JsDemo.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=JsDemo.js.map